
-- Make grandmaster slow spell work for all monsters in caster's sight.
local function CanApplySpell(Skill, Mastery, Resistance)
	if Resistance == const.MonsterImmune then
		return false
	else
		return (math.random(5, 100) + Skill + Mastery*2.5) > Resistance
	end
end

local function SlowEnemies(Caster, CasterId)
	local Skill, Mastery = SplitSkill(Caster:GetSkill(const.Skills.Earth))
	if Mastery >= 4 and Caster.SP >= Game.Spells[35].SpellPoints[4] then
		local Mons = Game.GetMonstersInSight()
		local Mon, Buff, Res, K
		local Count = 0
		for k,v in pairs(Mons) do
			Mon = Map.Monsters[v]
			Res = Mon.Resistances[const.Damage.Earth]
			if Mon.Hostile and Mon.HP > 0
				and Mon.SpellBuffs[const.MonsterBuff.Slow].ExpireTime < Game.Time
				and CanApplySpell(Skill, Mastery, Res) then

				K = math.max((100 - Res)/100, 0.1)
				Buff = Mon.SpellBuffs[const.MonsterBuff.Slow]
				Buff.Caster = CasterId
				Buff.Skill = math.ceil(Skill*K)
				Buff.Power = math.ceil(Mastery*K)
				Buff.ExpireTime = Game.Time + Buff.Skill*const.Minute

				Game.ShowMonsterBuffAnim(v)

				Count = Count + 1
				if Count >= 5 then
					break
				end
			end
		end
	end
end

NewCode = mem.asmpatch(0x426f82, [[
nop
nop
nop
nop
nop
cmp al, 0x3
jne absolute 0x42c200]])

local NextSlowCast
mem.hook(NewCode, function(d)
	local CasterId = (d.ecx - Party.PlayersArray[0]["?ptr"]) / Party.PlayersArray[0]["?size"]
	local Caster = Party.PlayersArray[CasterId]

	SlowEnemies(Caster, CasterId)

end)

-- Change chance calculation for "slow" and "mass distortion" spells to be applied.
local function CanApplySlowMassDistort(d)
	local PLId = (mem.u4[d.ebp-0x1c] - Party.PlayersArray[0]["?ptr"]) / Party.PlayersArray[0]["?size"]
	local PL = Party.PlayersArray[PLId]
	local Skill, Mastery = SplitSkill(PL:GetSkill(const.Skills.Earth))

	local MonId = (d.eax - Map.Monsters[0]["?ptr"]) / Map.Monsters[0]["?size"]
	local Mon = Map.Monsters[MonId]
	local Res = Mon.Resistances[const.Damage.Earth]

	if CanApplySpell(Skill, Mastery, Res) then
		d.eax = 1
	else
		d.eax = 0
	end
end

mem.nop(0x426f97, 3)
mem.hook(0x426fa2, CanApplySlowMassDistort)
mem.nop(0x426910, 2)
mem.nop(0x426918, 1)
mem.hook(0x42691e, CanApplySlowMassDistort)

-- Change selection mode for slow spell, if caster is grandmaster
NewCode = mem.asmpatch(0x425bc2, [[
jne absolute 0x425c5f
nop
nop
nop
nop
nop
test edi, edi
je @std

cmp edi, -1; Default - no selection
je absolute 0x425c5f

cmp edi, 1; Player or single monster
je absolute 0x425be2

cmp edi, 2; Item from inventory
je absolute 0x425be8

cmp edi, 3; Single monster
je absolute 0x425bee

cmp edi, 4; Single monster
je absolute 0x425bf4

cmp edi, 5; Active object, item or chest (Telekinesis)
je absolute 0x425bfa

cmp edi, 6; Single player
je absolute 0x425c00

cmp edi, 7; Single player
je absolute 0x425c1b

cmp edi, 8; Whole party
je absolute 0x425c33

cmp edi, 9; Hammerhands
je absolute 0x425c43

cmp edi, 0xA; Single player
je absolute 0x425c5b

@std:]])

mem.hook(NewCode + 6, function(d)
	local t = {Player = Party[d.edx], Spell = d.ecx, Custom = 0}
	events.call("GetSpellSelectionType", t)

	d.edi = t.Custom
end)

function events.GetSpellSelectionType(t)
	if t.Spell == 35 then
		local Skill, Mastery = SplitSkill(t.Player:GetSkill(const.Skills.Earth))
		if Mastery >= 4 then
			t.Custom = -1
		end
	end
end
