-- Visible Gauntlets - mini-mod

local Width, Height = 640, 480
local InGame = 0x71ef8d
local DragonsDoll = 4 -- disabled DollType in generating gauntlets icons

function StdCond()
	return mem.u4[InGame] == 1
end

local function CheckGautlets(i)
	if Game.Party[Game.CurrentPlayer].ItemGountlets ~= 0 then
		local InvId = Game.Party[Game.CurrentPlayer].ItemGountlets -- Id of gountlets in inventory
		if Game.ItemsTxt[i].Name == Game.Party[Game.CurrentPlayer].Items[InvId]:GetIdentifiedName() then -- if name of gauntlets in inventory == name in itemsTxt at "i" position
			return true
		else
			return false
		end
	else
		return false
	end
end

local function IsShieldEquiped()
  if Game.Party[Game.CurrentPlayer].ItemExtraHand ~= 0 then
	local InvId = Game.Party[Game.CurrentPlayer].ItemExtraHand -- Id of left weapon in inventory
	local leftWeapName = Game.Party[Game.CurrentPlayer].Items[InvId]:GetIdentifiedName()
	for i=0, Game.ItemsTxt.Count-1, 1 do
		if Game.ItemsTxt[i].Name == leftWeapName then
			if Game.ItemsTxt[i].EquipStat+1 == 5 then -- 5 - item type: shield
				return true
			else
				return false
			end
		end
	end
  else
	return false
  end
end

local function LeftWeaponEquiped()
  if Game.Party[Game.CurrentPlayer].ItemExtraHand ~= 0 then
	local InvId = Game.Party[Game.CurrentPlayer].ItemExtraHand -- Id of left weapon in inventory
	local leftWeapName = Game.Party[Game.CurrentPlayer].Items[InvId]:GetIdentifiedName()
	for i=0, Game.ItemsTxt.Count-1, 1 do
		if Game.ItemsTxt[i].Name == leftWeapName then
			local ItTxtType = Game.ItemsTxt[i].EquipStat+1
			if ItTxtType == 1 then -- 1 - item type: weapon
				return true
			else
				return false
			end
		end
	end
  else
	return false
  end
end

local function RightWeaponEquiped()
  if Game.Party[Game.CurrentPlayer].ItemMainHand ~= 0 then
	local InvId = Game.Party[Game.CurrentPlayer].ItemMainHand -- Id of left weapon in inventory
	local leftWeapName = Game.Party[Game.CurrentPlayer].Items[InvId]:GetIdentifiedName()
	for i=0, Game.ItemsTxt.Count-1, 1 do
		if Game.ItemsTxt[i].Name == leftWeapName then
			local ItTxtType = Game.ItemsTxt[i].EquipStat+1
			if ItTxtType == 1 then -- 1 - item type: weapon or weapon1or2
				return true
			else
				return false
			end
		end
	end
  else
	return false
  end
end

local function RightWeapon2HEquiped()
  if Game.Party[Game.CurrentPlayer].ItemMainHand ~= 0 then
	local InvId = Game.Party[Game.CurrentPlayer].ItemMainHand -- Id of left weapon in inventory
	local leftWeapName = Game.Party[Game.CurrentPlayer].Items[InvId]:GetIdentifiedName()
	for i=0, Game.ItemsTxt.Count-1, 1 do
		if Game.ItemsTxt[i].Name == leftWeapName then
			local ItTxtType = Game.ItemsTxt[i].EquipStat+1
			if ItTxtType == 2 then -- 2 - item type: weapon2
				return true
			else
				return false
			end
		end
	end
  else
	return false
  end
end

local function ReturnDollType()
	for i=0, Game.CharacterDollTypes.Count-1, 1 do
		if Game.CharacterPortraits[Game.Party[Game.CurrentPlayer].Face].DollType == i then
			return i
		end
	end
end

local function RightNormCond()
	return StdCond() and loupeActive == false and RightWeaponEquiped() == false and RightWeapon2HEquiped() == false
end

local function LeftNormCond()
	return StdCond() and loupeActive == false and LeftWeaponEquiped() == false and RightWeapon2HEquiped() == false and IsShieldEquiped() == false
end

local function RightWeapCond()
	return StdCond() and loupeActive == false and (RightWeaponEquiped() or RightWeapon2HEquiped())
end

local function LeftWeapCond()
	return StdCond() and loupeActive == false and LeftWeaponEquiped()
end

local function LeftOpenCond()
	return StdCond() and loupeActive == false and RightWeapon2HEquiped()
end

--[[
	LOCAL FUNCTIONS:
 CheckGautlets(id) - check is gauntlets with "id" from ItemsTxt is equiped
 IsShieldEquiped() - check is any shield equiped
 LeftWeaponEquiped() - check is any weapon(1 or 2 handed) equiped in left hand
 RightWeaponEquiped() - check is any weapon(1 or 2 handed) equiped in right hand
 RightWeapon2HEquiped() - check is any 2 handed weapon equiped in right hand
 ReturnDollType() - return doll type of current player
]]--

loupeActive = false

function events.GameInitialized2()

	function actLupa()
		DoGameAction(85)
		if loupeActive == false then
			loupeActive = true
		else
			loupeActive = false
		end
	end


	local Cords = {} -- cords for all gauntlets for current doll [#]
	Cords[0] = {--man
		RHdX=490,
		RHdY=155,

		RHuX=508,
		RHuY=163,

		LHdX=592,
		LHdY=170,

		LHuX=594,
		LHuY=169,

		LHoX=582,
		LHoY=169
	}
	Cords[1] = {--women
		RHdX=490,
		RHdY=155,

		RHuX=508,
		RHuY=163,

		LHdX=592,
		LHdY=170,

		LHuX=594,
		LHuY=169,

		LHoX=582,
		LHoY=169
	}
	Cords[2] = {--minotaur
		RHdX=490,
		RHdY=155,

		RHuX=508,
		RHuY=163,

		LHdX=592,
		LHdY=170,

		LHuX=594,
		LHuY=169,

		LHoX=582,
		LHoY=169
	}
	Cords[3] = {--troll
		RHdX=490,
		RHdY=155,

		RHuX=508,
		RHuY=163,

		LHdX=592,
		LHdY=170,

		LHuX=594,
		LHuY=169,

		LHoX=582,
		LHoY=169
	}
	Cords[4] = {--dragon
		RHdX=0,
		RHdY=0,

		RHuX=0,
		RHuY=0,

		LHdX=0,
		LHdY=0,

		LHuX=0,
		LHuY=0,

		LHoX=0,
		LHoY=0
	}
	Cords[5] = {--dragon
		RHdX=0,
		RHdY=0,

		RHuX=0,
		RHuY=0,

		LHdX=0,
		LHdY=0,

		LHuX=0,
		LHuY=0,

		LHoX=0,
		LHoY=0
	}
	-- creating icons for all gauntlets in ItemsTxt and for all DollTypes
	for ItemId=0, Game.ItemsTxt.Count-1, 1 do
	   if Game.ItemsTxt[ItemId].EquipStat == 8 then -- if gauntlets
		  for dollId=0, Game.CharacterDollTypes.Count-1, 1 do -- for all DollTypes
			 if dollId~=DragonsDoll then -- without dragons
				local picNameRHd = "gnt" .. ItemId .. "doll" .. dollId .. "RHd"
				local picNameRHu = "gnt" .. ItemId .. "doll" .. dollId .. "RHu"
				local picNameLHd = "gnt" .. ItemId .. "doll" .. dollId .. "LHd"
				local picNameLHu = "gnt" .. ItemId .. "doll" .. dollId .. "LHu"
				local picNameLHo = "gnt" .. ItemId .. "doll" .. dollId .. "LHo"
				_G[picNameRHd] = CustomUI.CreateIcon{
										Icon = picNameRHd, -- right hand normal
										X = Cords[dollId].RHdX,
										Y = Cords[dollId].RHdY,
										Condition = function() return CheckGautlets(ItemId) and RightNormCond() and ReturnDollType() == dollId end,
										Layer = 1,
										Screen = 7,
										Masked = true}

				_G[picNameRHu] = CustomUI.CreateIcon{
										Icon = picNameRHu, -- right hand weapon
										X = Cords[dollId].RHuX,
										Y = Cords[dollId].RHuY,
										Condition = function() return CheckGautlets(ItemId) and RightWeapCond() and ReturnDollType() == dollId end,
										Layer = 1,
										Screen = 7,
										Masked = true}

				_G[picNameLHd] = CustomUI.CreateIcon{
										Icon = picNameLHd, -- left hand normal
										X = Cords[dollId].LHdX,
										Y = Cords[dollId].LHdY,
										Condition = function() return CheckGautlets(ItemId) and LeftNormCond() and ReturnDollType() == dollId end,
										Layer = 1,
										Screen = 7,
										Masked = true}

				_G[picNameLHu] = CustomUI.CreateIcon{
										Icon = picNameLHu, -- left hand weapon
										X = Cords[dollId].LHuX,
										Y = Cords[dollId].LHuY,
										Condition = function() return CheckGautlets(ItemId) and LeftWeapCond() and ReturnDollType() == dollId end,
										Layer = 1,
										Screen = 7,
										Masked = true}

				_G[picNameLHo] = CustomUI.CreateIcon{
										Icon = picNameLHo, -- left hand open
										X = Cords[dollId].LHoX,
										Y = Cords[dollId].LHoY,
										Condition = function() return CheckGautlets(ItemId) and LeftOpenCond() and ReturnDollType() == dollId end,
										Layer = 1,
										Screen = 7,
										Masked = true}

			 end
		  end
	   end
	end
	loupeButton = CustomUI.CreateButton{
							IconUp = "MAGNIF-B2",
							IconDown = "MAGNIF-A2",
							IconMouseOver = "MAGNIF-A2",
							X = 603-130,
							Y = 299+8,
							Action = actLupa,
							Condition = function() return StdCond() end,
							Layer = 1,
							Screen = 7,
							Width = 75,
							Height = 26,
							Masked = true}

	function events.Action(t)
		if ( Game.CurrentScreen == 7 and StdCond() and CustomUI.MouseInBox(605, 299, 605+31, 299+31)) then
			t.Handled = true
--			if t.Action == 107 then
--				ToggleRepPanel()
--			end
		end
	end

	function events.FGInterfaceUpd()
		if Game.CurrentScreen ~= 7 and IsInGameScreen() then
			loupeActive = false
		end
	end

end
