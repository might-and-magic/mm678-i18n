
function events.GameInitialized2()

	-- Settings:
	local max, min	= math.max, math.min
	local MLKey		= const.Keys.BACK
	local UseMLIcon	= true
	local MLIcon 	= "MLTmp"
	local MPX,MPY	= 320,220

	----

	MLKey = MLKey or Game.PatchOptions.MouseLookChangeKey
	local C = ffi.C

	ffi.cdef([[
	bool SetCursorPos(int X, int Y);
	bool GetCursorPos(int lpPoint);
	int ShowCursor(bool bShow);
	bool GetClientRect(int hWnd, int Rect);
	bool ClientToScreen(int hWnd, int lpPoint);

	typedef struct {
	  long left;
	  long top;
	  long right;
	  long bottom;
	} RECT;
	]])

	local WindowHandle = Game.WindowHandle
	local LastX, LastY
	local wRect = ffi.new("RECT")
	local CursorOn
	local MouseLookOn = false
	local MLAngle = Game.PatchOptions.MaxMLookAngle
	local RectPtr = tonumber(string.sub(tostring(wRect), -10))
	local WasActive = false

	local MLIcon = CustomUI.CreateIcon{
		Icon	= MLIcon,
		X		= MPX,
		Y		= MPY,
		Screen	= 0,
		Layer	= 2,
		Masked	= true,
		Active	= false,
		Key		= "MLIcon_Tmp"
		}

	local function GetCursorState()
		C.ShowCursor(false)
		local State = C.ShowCursor(true)
		CursorOn = State >= 0
		if State > 0 then
			while C.ShowCursor(false) > 1 do end
		elseif State < -1 then
			while C.ShowCursor(true) < 0 do end
		end
		return CursorOn
	end
	CursorOn = GetCursorState()

	function events.KeyDown(t)
		if t.Key == MLKey then
			CursorOn = GetCursorState()
			MouseLookOn = not MouseLookOn
			if UseMLIcon then
				C.GetClientRect(WindowHandle, RectPtr)
				MPX, MPY = wRect.right/2, wRect.bottom/2 - 20
				--MLIcon.X = MPX
				--MLIcon.Y = MPY
				MLIcon.Active = MouseLookOn
			end
		end
	end

	function events.FGInterfaceUpd()

		if MouseLookOn and internal.InGame and Game.CurrentScreen == 0 then

			C.GetCursorPos(RectPtr)
			local X,Y = wRect.left, wRect.top

			wRect.right, wRect.bottom = 0, 0
			C.ClientToScreen(WindowHandle, RectPtr + 8)
			LastX, LastY = wRect.right + MPX, wRect.bottom + MPY

			if WasActive then

				Party.LookAngle = max(min(Party.LookAngle - Y + LastY, MLAngle), -MLAngle)

				local PDir = Party.Direction - X + LastX
				if PDir > 2048 then
					Party.Direction = PDir - 2048
				elseif PDir < 0 then
					Party.Direction = PDir + 2048
				else
					Party.Direction = PDir
				end

			end

			C.SetCursorPos(LastX, LastY)

			if CursorOn then
				CursorOn = false
				C.ShowCursor(CursorOn)
			end

			WasActive = true

		else
			if not CursorOn then
				CursorOn = true
				C.ShowCursor(CursorOn)
			end

			WasActive = false

		end

	end

end

